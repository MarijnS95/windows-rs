// Bindings generated by `windows-bindgen` 0.59.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

pub const CLSID_DxcCompiler: windows_core::GUID =
    windows_core::GUID::from_u128(0x73e22d93_e6ce_47f3_b5bf_f0664f39c1b0);
pub const CLSID_DxcContainerReflection: windows_core::GUID =
    windows_core::GUID::from_u128(0xb9f54489_55b8_400c_ba3a_1675e4728b91);
pub const CLSID_DxcLibrary: windows_core::GUID =
    windows_core::GUID::from_u128(0x6245d6af_66e0_48fd_80b4_4d271796748c);
pub const CLSID_DxcUtils: windows_core::GUID =
    windows_core::GUID::from_u128(0x6245d6af_66e0_48fd_80b4_4d271796748c);
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct D3D12_SHADER_DESC {
    pub Version: u32,
    pub Creator: windows_core::PCSTR,
    pub Flags: u32,
    pub ConstantBuffers: u32,
    pub BoundResources: u32,
    pub InputParameters: u32,
    pub OutputParameters: u32,
    pub InstructionCount: u32,
    pub TempRegisterCount: u32,
    pub TempArrayCount: u32,
    pub DefCount: u32,
    pub DclCount: u32,
    pub TextureNormalInstructions: u32,
    pub TextureLoadInstructions: u32,
    pub TextureCompInstructions: u32,
    pub TextureBiasInstructions: u32,
    pub TextureGradientInstructions: u32,
    pub FloatInstructionCount: u32,
    pub IntInstructionCount: u32,
    pub UintInstructionCount: u32,
    pub StaticFlowControlCount: u32,
    pub DynamicFlowControlCount: u32,
    pub MacroInstructionCount: u32,
    pub ArrayInstructionCount: u32,
    pub CutInstructionCount: u32,
    pub EmitInstructionCount: u32,
    pub GSOutputTopology: D3D_PRIMITIVE_TOPOLOGY,
    pub GSMaxOutputVertexCount: u32,
    pub InputPrimitive: D3D_PRIMITIVE,
    pub PatchConstantParameters: u32,
    pub cGSInstanceCount: u32,
    pub cControlPoints: u32,
    pub HSOutputPrimitive: D3D_TESSELLATOR_OUTPUT_PRIMITIVE,
    pub HSPartitioning: D3D_TESSELLATOR_PARTITIONING,
    pub TessellatorDomain: D3D_TESSELLATOR_DOMAIN,
    pub cBarrierInstructions: u32,
    pub cInterlockedInstructions: u32,
    pub cTextureStoreInstructions: u32,
}
impl Default for D3D12_SHADER_DESC {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct D3D_PRIMITIVE(pub i32);
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct D3D_PRIMITIVE_TOPOLOGY(pub i32);
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct D3D_TESSELLATOR_DOMAIN(pub i32);
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct D3D_TESSELLATOR_OUTPUT_PRIMITIVE(pub i32);
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct D3D_TESSELLATOR_PARTITIONING(pub i32);
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct DXC_CP(pub u32);
pub const DXC_CP_ACP: DXC_CP = DXC_CP(0u32);
pub const DXC_CP_UTF8: DXC_CP = DXC_CP(65001u32);
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct DXC_OUT_KIND(pub i32);
pub const DXC_OUT_OBJECT: DXC_OUT_KIND = DXC_OUT_KIND(1i32);
pub const DXC_OUT_PDB: DXC_OUT_KIND = DXC_OUT_KIND(3i32);
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct DXC_PART(pub u32);
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct DxcBuffer {
    pub Ptr: *const core::ffi::c_void,
    pub Size: usize,
    pub Encoding: DXC_CP,
}
impl Default for DxcBuffer {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
pub type DxcCreateInstanceProc = Option<
    unsafe extern "system" fn(
        rclsid: *const windows_core::GUID,
        riid: *const windows_core::GUID,
        ppv: *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
>;
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct HEAP_FLAGS(pub u32);
impl HEAP_FLAGS {
    pub const fn contains(&self, other: Self) -> bool {
        self.0 & other.0 == other.0
    }
}
impl core::ops::BitOr for HEAP_FLAGS {
    type Output = Self;
    fn bitor(self, other: Self) -> Self {
        Self(self.0 | other.0)
    }
}
impl core::ops::BitAnd for HEAP_FLAGS {
    type Output = Self;
    fn bitand(self, other: Self) -> Self {
        Self(self.0 & other.0)
    }
}
impl core::ops::BitOrAssign for HEAP_FLAGS {
    fn bitor_assign(&mut self, other: Self) {
        self.0.bitor_assign(other.0)
    }
}
impl core::ops::BitAndAssign for HEAP_FLAGS {
    fn bitand_assign(&mut self, other: Self) {
        self.0.bitand_assign(other.0)
    }
}
impl core::ops::Not for HEAP_FLAGS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
windows_core::imp::define_interface!(
    ID3D12ShaderReflection,
    ID3D12ShaderReflection_Vtbl,
    0x5a58797d_a72c_478d_8ba2_efc6b0efe88e
);
windows_core::imp::interface_hierarchy!(ID3D12ShaderReflection, windows_core::IUnknown);
impl ID3D12ShaderReflection {
    pub unsafe fn GetDesc(&self, pdesc: *mut D3D12_SHADER_DESC) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).GetDesc)(
                windows_core::Interface::as_raw(self),
                pdesc as _,
            )
            .ok()
        }
    }
    pub unsafe fn GetMovInstructionCount(&self) -> u32 {
        unsafe {
            (windows_core::Interface::vtable(self).GetMovInstructionCount)(
                windows_core::Interface::as_raw(self),
            )
        }
    }
    pub unsafe fn GetMovcInstructionCount(&self) -> u32 {
        unsafe {
            (windows_core::Interface::vtable(self).GetMovcInstructionCount)(
                windows_core::Interface::as_raw(self),
            )
        }
    }
    pub unsafe fn GetConversionInstructionCount(&self) -> u32 {
        unsafe {
            (windows_core::Interface::vtable(self).GetConversionInstructionCount)(
                windows_core::Interface::as_raw(self),
            )
        }
    }
    pub unsafe fn GetBitwiseInstructionCount(&self) -> u32 {
        unsafe {
            (windows_core::Interface::vtable(self).GetBitwiseInstructionCount)(
                windows_core::Interface::as_raw(self),
            )
        }
    }
    pub unsafe fn GetGSInputPrimitive(&self) -> D3D_PRIMITIVE {
        unsafe {
            (windows_core::Interface::vtable(self).GetGSInputPrimitive)(
                windows_core::Interface::as_raw(self),
            )
        }
    }
    pub unsafe fn IsSampleFrequencyShader(&self) -> windows_core::BOOL {
        unsafe {
            (windows_core::Interface::vtable(self).IsSampleFrequencyShader)(
                windows_core::Interface::as_raw(self),
            )
        }
    }
    pub unsafe fn GetNumInterfaceSlots(&self) -> u32 {
        unsafe {
            (windows_core::Interface::vtable(self).GetNumInterfaceSlots)(
                windows_core::Interface::as_raw(self),
            )
        }
    }
    pub unsafe fn GetThreadGroupSize(
        &self,
        psizex: Option<*mut u32>,
        psizey: Option<*mut u32>,
        psizez: Option<*mut u32>,
    ) -> u32 {
        unsafe {
            (windows_core::Interface::vtable(self).GetThreadGroupSize)(
                windows_core::Interface::as_raw(self),
                psizex.unwrap_or(core::mem::zeroed()) as _,
                psizey.unwrap_or(core::mem::zeroed()) as _,
                psizez.unwrap_or(core::mem::zeroed()) as _,
            )
        }
    }
    pub unsafe fn GetRequiresFlags(&self) -> u64 {
        unsafe {
            (windows_core::Interface::vtable(self).GetRequiresFlags)(
                windows_core::Interface::as_raw(self),
            )
        }
    }
}
#[repr(C)]
pub struct ID3D12ShaderReflection_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub GetDesc: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut D3D12_SHADER_DESC,
    ) -> windows_core::HRESULT,
    GetConstantBufferByIndex: usize,
    GetConstantBufferByName: usize,
    GetResourceBindingDesc: usize,
    GetInputParameterDesc: usize,
    GetOutputParameterDesc: usize,
    GetPatchConstantParameterDesc: usize,
    GetVariableByName: usize,
    GetResourceBindingDescByName: usize,
    pub GetMovInstructionCount: unsafe extern "system" fn(*mut core::ffi::c_void) -> u32,
    pub GetMovcInstructionCount: unsafe extern "system" fn(*mut core::ffi::c_void) -> u32,
    pub GetConversionInstructionCount: unsafe extern "system" fn(*mut core::ffi::c_void) -> u32,
    pub GetBitwiseInstructionCount: unsafe extern "system" fn(*mut core::ffi::c_void) -> u32,
    pub GetGSInputPrimitive: unsafe extern "system" fn(*mut core::ffi::c_void) -> D3D_PRIMITIVE,
    pub IsSampleFrequencyShader:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::BOOL,
    pub GetNumInterfaceSlots: unsafe extern "system" fn(*mut core::ffi::c_void) -> u32,
    GetMinFeatureLevel: usize,
    pub GetThreadGroupSize:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32, *mut u32, *mut u32) -> u32,
    pub GetRequiresFlags: unsafe extern "system" fn(*mut core::ffi::c_void) -> u64,
}
unsafe impl Send for ID3D12ShaderReflection {}
unsafe impl Sync for ID3D12ShaderReflection {}
pub trait ID3D12ShaderReflection_Impl: windows_core::IUnknownImpl {
    fn GetDesc(&self, pdesc: *mut D3D12_SHADER_DESC) -> windows_core::Result<()>;
    fn GetMovInstructionCount(&self) -> u32;
    fn GetMovcInstructionCount(&self) -> u32;
    fn GetConversionInstructionCount(&self) -> u32;
    fn GetBitwiseInstructionCount(&self) -> u32;
    fn GetGSInputPrimitive(&self) -> D3D_PRIMITIVE;
    fn IsSampleFrequencyShader(&self) -> windows_core::BOOL;
    fn GetNumInterfaceSlots(&self) -> u32;
    fn GetThreadGroupSize(&self, psizex: *mut u32, psizey: *mut u32, psizez: *mut u32) -> u32;
    fn GetRequiresFlags(&self) -> u64;
}
impl ID3D12ShaderReflection_Vtbl {
    pub const fn new<Identity: ID3D12ShaderReflection_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetDesc<
            Identity: ID3D12ShaderReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pdesc: *mut D3D12_SHADER_DESC,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ID3D12ShaderReflection_Impl::GetDesc(this, core::mem::transmute_copy(&pdesc)).into()
            }
        }
        unsafe extern "system" fn GetMovInstructionCount<
            Identity: ID3D12ShaderReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> u32 {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ID3D12ShaderReflection_Impl::GetMovInstructionCount(this)
            }
        }
        unsafe extern "system" fn GetMovcInstructionCount<
            Identity: ID3D12ShaderReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> u32 {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ID3D12ShaderReflection_Impl::GetMovcInstructionCount(this)
            }
        }
        unsafe extern "system" fn GetConversionInstructionCount<
            Identity: ID3D12ShaderReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> u32 {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ID3D12ShaderReflection_Impl::GetConversionInstructionCount(this)
            }
        }
        unsafe extern "system" fn GetBitwiseInstructionCount<
            Identity: ID3D12ShaderReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> u32 {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ID3D12ShaderReflection_Impl::GetBitwiseInstructionCount(this)
            }
        }
        unsafe extern "system" fn GetGSInputPrimitive<
            Identity: ID3D12ShaderReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> D3D_PRIMITIVE {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ID3D12ShaderReflection_Impl::GetGSInputPrimitive(this)
            }
        }
        unsafe extern "system" fn IsSampleFrequencyShader<
            Identity: ID3D12ShaderReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::BOOL {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ID3D12ShaderReflection_Impl::IsSampleFrequencyShader(this)
            }
        }
        unsafe extern "system" fn GetNumInterfaceSlots<
            Identity: ID3D12ShaderReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> u32 {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ID3D12ShaderReflection_Impl::GetNumInterfaceSlots(this)
            }
        }
        unsafe extern "system" fn GetThreadGroupSize<
            Identity: ID3D12ShaderReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            psizex: *mut u32,
            psizey: *mut u32,
            psizez: *mut u32,
        ) -> u32 {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ID3D12ShaderReflection_Impl::GetThreadGroupSize(
                    this,
                    core::mem::transmute_copy(&psizex),
                    core::mem::transmute_copy(&psizey),
                    core::mem::transmute_copy(&psizez),
                )
            }
        }
        unsafe extern "system" fn GetRequiresFlags<
            Identity: ID3D12ShaderReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> u64 {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ID3D12ShaderReflection_Impl::GetRequiresFlags(this)
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            GetDesc: GetDesc::<Identity, OFFSET>,
            GetConstantBufferByIndex: 0,
            GetConstantBufferByName: 0,
            GetResourceBindingDesc: 0,
            GetInputParameterDesc: 0,
            GetOutputParameterDesc: 0,
            GetPatchConstantParameterDesc: 0,
            GetVariableByName: 0,
            GetResourceBindingDescByName: 0,
            GetMovInstructionCount: GetMovInstructionCount::<Identity, OFFSET>,
            GetMovcInstructionCount: GetMovcInstructionCount::<Identity, OFFSET>,
            GetConversionInstructionCount: GetConversionInstructionCount::<Identity, OFFSET>,
            GetBitwiseInstructionCount: GetBitwiseInstructionCount::<Identity, OFFSET>,
            GetGSInputPrimitive: GetGSInputPrimitive::<Identity, OFFSET>,
            IsSampleFrequencyShader: IsSampleFrequencyShader::<Identity, OFFSET>,
            GetNumInterfaceSlots: GetNumInterfaceSlots::<Identity, OFFSET>,
            GetMinFeatureLevel: 0,
            GetThreadGroupSize: GetThreadGroupSize::<Identity, OFFSET>,
            GetRequiresFlags: GetRequiresFlags::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ID3D12ShaderReflection as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for ID3D12ShaderReflection {}
windows_core::imp::define_interface!(
    IDxcBlob,
    IDxcBlob_Vtbl,
    0x8ba5fb08_5195_40e2_ac58_0d989c3a0102
);
windows_core::imp::interface_hierarchy!(IDxcBlob, windows_core::IUnknown);
impl IDxcBlob {
    pub unsafe fn GetBufferPointer(&self) -> *mut core::ffi::c_void {
        unsafe {
            (windows_core::Interface::vtable(self).GetBufferPointer)(
                windows_core::Interface::as_raw(self),
            )
        }
    }
    pub unsafe fn GetBufferSize(&self) -> usize {
        unsafe {
            (windows_core::Interface::vtable(self).GetBufferSize)(windows_core::Interface::as_raw(
                self,
            ))
        }
    }
}
#[repr(C)]
pub struct IDxcBlob_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub GetBufferPointer:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> *mut core::ffi::c_void,
    pub GetBufferSize: unsafe extern "system" fn(*mut core::ffi::c_void) -> usize,
}
pub trait IDxcBlob_Impl: windows_core::IUnknownImpl {
    fn GetBufferPointer(&self) -> *mut core::ffi::c_void;
    fn GetBufferSize(&self) -> usize;
}
impl IDxcBlob_Vtbl {
    pub const fn new<Identity: IDxcBlob_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetBufferPointer<Identity: IDxcBlob_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> *mut core::ffi::c_void {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcBlob_Impl::GetBufferPointer(this)
            }
        }
        unsafe extern "system" fn GetBufferSize<Identity: IDxcBlob_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> usize {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcBlob_Impl::GetBufferSize(this)
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            GetBufferPointer: GetBufferPointer::<Identity, OFFSET>,
            GetBufferSize: GetBufferSize::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDxcBlob as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IDxcBlob {}
windows_core::imp::define_interface!(
    IDxcBlobEncoding,
    IDxcBlobEncoding_Vtbl,
    0x7241d424_2646_4191_97c0_98e96e42fc68
);
impl core::ops::Deref for IDxcBlobEncoding {
    type Target = IDxcBlob;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IDxcBlobEncoding, windows_core::IUnknown, IDxcBlob);
impl IDxcBlobEncoding {
    pub unsafe fn GetEncoding(
        &self,
        pknown: *mut windows_core::BOOL,
        pcodepage: *mut DXC_CP,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).GetEncoding)(
                windows_core::Interface::as_raw(self),
                pknown as _,
                pcodepage as _,
            )
            .ok()
        }
    }
}
#[repr(C)]
pub struct IDxcBlobEncoding_Vtbl {
    pub base__: IDxcBlob_Vtbl,
    pub GetEncoding: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_core::BOOL,
        *mut DXC_CP,
    ) -> windows_core::HRESULT,
}
pub trait IDxcBlobEncoding_Impl: IDxcBlob_Impl {
    fn GetEncoding(
        &self,
        pknown: *mut windows_core::BOOL,
        pcodepage: *mut DXC_CP,
    ) -> windows_core::Result<()>;
}
impl IDxcBlobEncoding_Vtbl {
    pub const fn new<Identity: IDxcBlobEncoding_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetEncoding<
            Identity: IDxcBlobEncoding_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pknown: *mut windows_core::BOOL,
            pcodepage: *mut DXC_CP,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcBlobEncoding_Impl::GetEncoding(
                    this,
                    core::mem::transmute_copy(&pknown),
                    core::mem::transmute_copy(&pcodepage),
                )
                .into()
            }
        }
        Self {
            base__: IDxcBlob_Vtbl::new::<Identity, OFFSET>(),
            GetEncoding: GetEncoding::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDxcBlobEncoding as windows_core::Interface>::IID
            || iid == &<IDxcBlob as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IDxcBlobEncoding {}
windows_core::imp::define_interface!(
    IDxcBlobUtf16,
    IDxcBlobUtf16_Vtbl,
    0xa3f84eab_0faa_497e_a39c_ee6ed60b2d84
);
impl core::ops::Deref for IDxcBlobUtf16 {
    type Target = IDxcBlobEncoding;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IDxcBlobUtf16,
    windows_core::IUnknown,
    IDxcBlob,
    IDxcBlobEncoding
);
impl IDxcBlobUtf16 {
    pub unsafe fn GetStringPointer(&self) -> windows_core::PCWSTR {
        unsafe {
            (windows_core::Interface::vtable(self).GetStringPointer)(
                windows_core::Interface::as_raw(self),
            )
        }
    }
    pub unsafe fn GetStringLength(&self) -> usize {
        unsafe {
            (windows_core::Interface::vtable(self).GetStringLength)(
                windows_core::Interface::as_raw(self),
            )
        }
    }
}
#[repr(C)]
pub struct IDxcBlobUtf16_Vtbl {
    pub base__: IDxcBlobEncoding_Vtbl,
    pub GetStringPointer: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::PCWSTR,
    pub GetStringLength: unsafe extern "system" fn(*mut core::ffi::c_void) -> usize,
}
pub trait IDxcBlobUtf16_Impl: IDxcBlobEncoding_Impl {
    fn GetStringPointer(&self) -> windows_core::PCWSTR;
    fn GetStringLength(&self) -> usize;
}
impl IDxcBlobUtf16_Vtbl {
    pub const fn new<Identity: IDxcBlobUtf16_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetStringPointer<
            Identity: IDxcBlobUtf16_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcBlobUtf16_Impl::GetStringPointer(this)
            }
        }
        unsafe extern "system" fn GetStringLength<
            Identity: IDxcBlobUtf16_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> usize {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcBlobUtf16_Impl::GetStringLength(this)
            }
        }
        Self {
            base__: IDxcBlobEncoding_Vtbl::new::<Identity, OFFSET>(),
            GetStringPointer: GetStringPointer::<Identity, OFFSET>,
            GetStringLength: GetStringLength::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDxcBlobUtf16 as windows_core::Interface>::IID
            || iid == &<IDxcBlob as windows_core::Interface>::IID
            || iid == &<IDxcBlobEncoding as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IDxcBlobUtf16 {}
windows_core::imp::define_interface!(
    IDxcCompiler3,
    IDxcCompiler3_Vtbl,
    0x228b4687_5a6a_4730_900c_9702b2203f54
);
windows_core::imp::interface_hierarchy!(IDxcCompiler3, windows_core::IUnknown);
impl IDxcCompiler3 {
    pub unsafe fn Compile<P3, T>(
        &self,
        psource: *const DxcBuffer,
        parguments: Option<&[windows_core::PCWSTR]>,
        pincludehandler: P3,
    ) -> windows_core::Result<T>
    where
        P3: windows_core::Param<IDxcIncludeHandler>,
        T: windows_core::Interface,
    {
        let mut result__ = core::ptr::null_mut();
        unsafe {
            (windows_core::Interface::vtable(self).Compile)(
                windows_core::Interface::as_raw(self),
                psource,
                core::mem::transmute(
                    parguments
                        .as_deref()
                        .map_or(core::ptr::null(), |slice| slice.as_ptr()),
                ),
                parguments
                    .as_deref()
                    .map_or(0, |slice| slice.len().try_into().unwrap()),
                pincludehandler.param().abi(),
                &T::IID,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn Disassemble<T>(&self, pobject: *const DxcBuffer) -> windows_core::Result<T>
    where
        T: windows_core::Interface,
    {
        let mut result__ = core::ptr::null_mut();
        unsafe {
            (windows_core::Interface::vtable(self).Disassemble)(
                windows_core::Interface::as_raw(self),
                pobject,
                &T::IID,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
#[repr(C)]
pub struct IDxcCompiler3_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub Compile: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const DxcBuffer,
        *const windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *const windows_core::GUID,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Disassemble: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const DxcBuffer,
        *const windows_core::GUID,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
pub trait IDxcCompiler3_Impl: windows_core::IUnknownImpl {
    fn Compile(
        &self,
        psource: *const DxcBuffer,
        parguments: *const windows_core::PCWSTR,
        argcount: u32,
        pincludehandler: windows_core::Ref<'_, IDxcIncludeHandler>,
        riid: *const windows_core::GUID,
        ppresult: *mut *mut core::ffi::c_void,
    ) -> windows_core::Result<()>;
    fn Disassemble(
        &self,
        pobject: *const DxcBuffer,
        riid: *const windows_core::GUID,
        ppresult: *mut *mut core::ffi::c_void,
    ) -> windows_core::Result<()>;
}
impl IDxcCompiler3_Vtbl {
    pub const fn new<Identity: IDxcCompiler3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Compile<Identity: IDxcCompiler3_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            psource: *const DxcBuffer,
            parguments: *const windows_core::PCWSTR,
            argcount: u32,
            pincludehandler: *mut core::ffi::c_void,
            riid: *const windows_core::GUID,
            ppresult: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcCompiler3_Impl::Compile(
                    this,
                    core::mem::transmute_copy(&psource),
                    core::mem::transmute_copy(&parguments),
                    core::mem::transmute_copy(&argcount),
                    core::mem::transmute_copy(&pincludehandler),
                    core::mem::transmute_copy(&riid),
                    core::mem::transmute_copy(&ppresult),
                )
                .into()
            }
        }
        unsafe extern "system" fn Disassemble<Identity: IDxcCompiler3_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            pobject: *const DxcBuffer,
            riid: *const windows_core::GUID,
            ppresult: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcCompiler3_Impl::Disassemble(
                    this,
                    core::mem::transmute_copy(&pobject),
                    core::mem::transmute_copy(&riid),
                    core::mem::transmute_copy(&ppresult),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            Compile: Compile::<Identity, OFFSET>,
            Disassemble: Disassemble::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDxcCompiler3 as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IDxcCompiler3 {}
windows_core::imp::define_interface!(
    IDxcContainerReflection,
    IDxcContainerReflection_Vtbl,
    0xd2c21b26_8350_4bdc_976a_331ce6f4c54c
);
windows_core::imp::interface_hierarchy!(IDxcContainerReflection, windows_core::IUnknown);
impl IDxcContainerReflection {
    pub unsafe fn Load<P0>(&self, pcontainer: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IDxcBlob>,
    {
        unsafe {
            (windows_core::Interface::vtable(self).Load)(
                windows_core::Interface::as_raw(self),
                pcontainer.param().abi(),
            )
            .ok()
        }
    }
    pub unsafe fn GetPartCount(&self) -> windows_core::Result<u32> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).GetPartCount)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub unsafe fn GetPartKind(&self, idx: u32) -> windows_core::Result<DXC_PART> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).GetPartKind)(
                windows_core::Interface::as_raw(self),
                idx,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub unsafe fn GetPartContent(&self, idx: u32) -> windows_core::Result<IDxcBlob> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).GetPartContent)(
                windows_core::Interface::as_raw(self),
                idx,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn FindFirstPartKind(&self, kind: DXC_PART) -> windows_core::Result<u32> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).FindFirstPartKind)(
                windows_core::Interface::as_raw(self),
                kind,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub unsafe fn GetPartReflection<T>(&self, idx: u32) -> windows_core::Result<T>
    where
        T: windows_core::Interface,
    {
        let mut result__ = core::ptr::null_mut();
        unsafe {
            (windows_core::Interface::vtable(self).GetPartReflection)(
                windows_core::Interface::as_raw(self),
                idx,
                &T::IID,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
#[repr(C)]
pub struct IDxcContainerReflection_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub Load: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetPartCount:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub GetPartKind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut DXC_PART,
    ) -> windows_core::HRESULT,
    pub GetPartContent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FindFirstPartKind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        DXC_PART,
        *mut u32,
    ) -> windows_core::HRESULT,
    pub GetPartReflection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const windows_core::GUID,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
pub trait IDxcContainerReflection_Impl: windows_core::IUnknownImpl {
    fn Load(&self, pcontainer: windows_core::Ref<'_, IDxcBlob>) -> windows_core::Result<()>;
    fn GetPartCount(&self) -> windows_core::Result<u32>;
    fn GetPartKind(&self, idx: u32) -> windows_core::Result<DXC_PART>;
    fn GetPartContent(&self, idx: u32) -> windows_core::Result<IDxcBlob>;
    fn FindFirstPartKind(&self, kind: DXC_PART) -> windows_core::Result<u32>;
    fn GetPartReflection(
        &self,
        idx: u32,
        iid: *const windows_core::GUID,
        ppvobject: *mut *mut core::ffi::c_void,
    ) -> windows_core::Result<()>;
}
impl IDxcContainerReflection_Vtbl {
    pub const fn new<Identity: IDxcContainerReflection_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Load<
            Identity: IDxcContainerReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pcontainer: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcContainerReflection_Impl::Load(this, core::mem::transmute_copy(&pcontainer))
                    .into()
            }
        }
        unsafe extern "system" fn GetPartCount<
            Identity: IDxcContainerReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            presult: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcContainerReflection_Impl::GetPartCount(this) {
                    Ok(ok__) => {
                        presult.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetPartKind<
            Identity: IDxcContainerReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            idx: u32,
            presult: *mut DXC_PART,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcContainerReflection_Impl::GetPartKind(
                    this,
                    core::mem::transmute_copy(&idx),
                ) {
                    Ok(ok__) => {
                        presult.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetPartContent<
            Identity: IDxcContainerReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            idx: u32,
            ppresult: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcContainerReflection_Impl::GetPartContent(
                    this,
                    core::mem::transmute_copy(&idx),
                ) {
                    Ok(ok__) => {
                        ppresult.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FindFirstPartKind<
            Identity: IDxcContainerReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            kind: DXC_PART,
            presult: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcContainerReflection_Impl::FindFirstPartKind(
                    this,
                    core::mem::transmute_copy(&kind),
                ) {
                    Ok(ok__) => {
                        presult.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetPartReflection<
            Identity: IDxcContainerReflection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            idx: u32,
            iid: *const windows_core::GUID,
            ppvobject: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcContainerReflection_Impl::GetPartReflection(
                    this,
                    core::mem::transmute_copy(&idx),
                    core::mem::transmute_copy(&iid),
                    core::mem::transmute_copy(&ppvobject),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            Load: Load::<Identity, OFFSET>,
            GetPartCount: GetPartCount::<Identity, OFFSET>,
            GetPartKind: GetPartKind::<Identity, OFFSET>,
            GetPartContent: GetPartContent::<Identity, OFFSET>,
            FindFirstPartKind: FindFirstPartKind::<Identity, OFFSET>,
            GetPartReflection: GetPartReflection::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDxcContainerReflection as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IDxcContainerReflection {}
windows_core::imp::define_interface!(
    IDxcIncludeHandler,
    IDxcIncludeHandler_Vtbl,
    0x7f61fc7d_950d_467f_b3e3_3c02fb49187c
);
windows_core::imp::interface_hierarchy!(IDxcIncludeHandler, windows_core::IUnknown);
impl IDxcIncludeHandler {
    pub unsafe fn LoadSource<P0>(&self, pfilename: P0) -> windows_core::Result<IDxcBlob>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).LoadSource)(
                windows_core::Interface::as_raw(self),
                pfilename.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
#[repr(C)]
pub struct IDxcIncludeHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub LoadSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
pub trait IDxcIncludeHandler_Impl: windows_core::IUnknownImpl {
    fn LoadSource(&self, pfilename: &windows_core::PCWSTR) -> windows_core::Result<IDxcBlob>;
}
impl IDxcIncludeHandler_Vtbl {
    pub const fn new<Identity: IDxcIncludeHandler_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn LoadSource<
            Identity: IDxcIncludeHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pfilename: windows_core::PCWSTR,
            ppincludesource: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcIncludeHandler_Impl::LoadSource(this, core::mem::transmute(&pfilename)) {
                    Ok(ok__) => {
                        ppincludesource.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            LoadSource: LoadSource::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDxcIncludeHandler as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IDxcIncludeHandler {}
windows_core::imp::define_interface!(
    IDxcLibrary,
    IDxcLibrary_Vtbl,
    0xe5204dc7_d18c_4c3c_bdfb_851673980fe7
);
windows_core::imp::interface_hierarchy!(IDxcLibrary, windows_core::IUnknown);
impl IDxcLibrary {
    pub unsafe fn CreateBlobFromBlob<P0>(
        &self,
        pblob: P0,
        offset: u32,
        length: u32,
    ) -> windows_core::Result<IDxcBlob>
    where
        P0: windows_core::Param<IDxcBlob>,
    {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).CreateBlobFromBlob)(
                windows_core::Interface::as_raw(self),
                pblob.param().abi(),
                offset,
                length,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn CreateBlobFromFile<P0>(
        &self,
        pfilename: P0,
        codepage: Option<*const DXC_CP>,
    ) -> windows_core::Result<IDxcBlobEncoding>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).CreateBlobFromFile)(
                windows_core::Interface::as_raw(self),
                pfilename.param().abi(),
                codepage.unwrap_or(core::mem::zeroed()) as _,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn CreateBlobWithEncodingFromPinned(
        &self,
        ptext: *const core::ffi::c_void,
        size: u32,
        codepage: DXC_CP,
    ) -> windows_core::Result<IDxcBlobEncoding> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).CreateBlobWithEncodingFromPinned)(
                windows_core::Interface::as_raw(self),
                ptext,
                size,
                codepage,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn CreateBlobWithEncodingOnHeapCopy(
        &self,
        ptext: *const core::ffi::c_void,
        size: u32,
        codepage: DXC_CP,
    ) -> windows_core::Result<IDxcBlobEncoding> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).CreateBlobWithEncodingOnHeapCopy)(
                windows_core::Interface::as_raw(self),
                ptext,
                size,
                codepage,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn CreateIncludeHandler(&self) -> windows_core::Result<IDxcIncludeHandler> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).CreateIncludeHandler)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn GetBlobAsUtf8<P0>(&self, pblob: P0) -> windows_core::Result<IDxcBlobEncoding>
    where
        P0: windows_core::Param<IDxcBlob>,
    {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).GetBlobAsUtf8)(
                windows_core::Interface::as_raw(self),
                pblob.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn GetBlobAsWide<P0>(&self, pblob: P0) -> windows_core::Result<IDxcBlobEncoding>
    where
        P0: windows_core::Param<IDxcBlob>,
    {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).GetBlobAsWide)(
                windows_core::Interface::as_raw(self),
                pblob.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
#[repr(C)]
pub struct IDxcLibrary_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    SetMalloc: usize,
    pub CreateBlobFromBlob: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        u32,
        u32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateBlobFromFile: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *const DXC_CP,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateBlobWithEncodingFromPinned: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const core::ffi::c_void,
        u32,
        DXC_CP,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateBlobWithEncodingOnHeapCopy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const core::ffi::c_void,
        u32,
        DXC_CP,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    CreateBlobWithEncodingOnMalloc: usize,
    pub CreateIncludeHandler: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    CreateStreamFromBlobReadOnly: usize,
    pub GetBlobAsUtf8: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetBlobAsWide: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
pub trait IDxcLibrary_Impl: windows_core::IUnknownImpl {
    fn CreateBlobFromBlob(
        &self,
        pblob: windows_core::Ref<'_, IDxcBlob>,
        offset: u32,
        length: u32,
    ) -> windows_core::Result<IDxcBlob>;
    fn CreateBlobFromFile(
        &self,
        pfilename: &windows_core::PCWSTR,
        codepage: *const DXC_CP,
    ) -> windows_core::Result<IDxcBlobEncoding>;
    fn CreateBlobWithEncodingFromPinned(
        &self,
        ptext: *const core::ffi::c_void,
        size: u32,
        codepage: DXC_CP,
    ) -> windows_core::Result<IDxcBlobEncoding>;
    fn CreateBlobWithEncodingOnHeapCopy(
        &self,
        ptext: *const core::ffi::c_void,
        size: u32,
        codepage: DXC_CP,
    ) -> windows_core::Result<IDxcBlobEncoding>;
    fn CreateIncludeHandler(&self) -> windows_core::Result<IDxcIncludeHandler>;
    fn GetBlobAsUtf8(
        &self,
        pblob: windows_core::Ref<'_, IDxcBlob>,
    ) -> windows_core::Result<IDxcBlobEncoding>;
    fn GetBlobAsWide(
        &self,
        pblob: windows_core::Ref<'_, IDxcBlob>,
    ) -> windows_core::Result<IDxcBlobEncoding>;
}
impl IDxcLibrary_Vtbl {
    pub const fn new<Identity: IDxcLibrary_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateBlobFromBlob<
            Identity: IDxcLibrary_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pblob: *mut core::ffi::c_void,
            offset: u32,
            length: u32,
            ppresult: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcLibrary_Impl::CreateBlobFromBlob(
                    this,
                    core::mem::transmute_copy(&pblob),
                    core::mem::transmute_copy(&offset),
                    core::mem::transmute_copy(&length),
                ) {
                    Ok(ok__) => {
                        ppresult.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateBlobFromFile<
            Identity: IDxcLibrary_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pfilename: windows_core::PCWSTR,
            codepage: *const DXC_CP,
            pblobencoding: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcLibrary_Impl::CreateBlobFromFile(
                    this,
                    core::mem::transmute(&pfilename),
                    core::mem::transmute_copy(&codepage),
                ) {
                    Ok(ok__) => {
                        pblobencoding.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateBlobWithEncodingFromPinned<
            Identity: IDxcLibrary_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            ptext: *const core::ffi::c_void,
            size: u32,
            codepage: DXC_CP,
            pblobencoding: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcLibrary_Impl::CreateBlobWithEncodingFromPinned(
                    this,
                    core::mem::transmute_copy(&ptext),
                    core::mem::transmute_copy(&size),
                    core::mem::transmute_copy(&codepage),
                ) {
                    Ok(ok__) => {
                        pblobencoding.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateBlobWithEncodingOnHeapCopy<
            Identity: IDxcLibrary_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            ptext: *const core::ffi::c_void,
            size: u32,
            codepage: DXC_CP,
            pblobencoding: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcLibrary_Impl::CreateBlobWithEncodingOnHeapCopy(
                    this,
                    core::mem::transmute_copy(&ptext),
                    core::mem::transmute_copy(&size),
                    core::mem::transmute_copy(&codepage),
                ) {
                    Ok(ok__) => {
                        pblobencoding.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateIncludeHandler<
            Identity: IDxcLibrary_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            ppresult: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcLibrary_Impl::CreateIncludeHandler(this) {
                    Ok(ok__) => {
                        ppresult.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetBlobAsUtf8<Identity: IDxcLibrary_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            pblob: *mut core::ffi::c_void,
            pblobencoding: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcLibrary_Impl::GetBlobAsUtf8(this, core::mem::transmute_copy(&pblob)) {
                    Ok(ok__) => {
                        pblobencoding.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetBlobAsWide<Identity: IDxcLibrary_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            pblob: *mut core::ffi::c_void,
            pblobencoding: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcLibrary_Impl::GetBlobAsWide(this, core::mem::transmute_copy(&pblob)) {
                    Ok(ok__) => {
                        pblobencoding.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            SetMalloc: 0,
            CreateBlobFromBlob: CreateBlobFromBlob::<Identity, OFFSET>,
            CreateBlobFromFile: CreateBlobFromFile::<Identity, OFFSET>,
            CreateBlobWithEncodingFromPinned: CreateBlobWithEncodingFromPinned::<Identity, OFFSET>,
            CreateBlobWithEncodingOnHeapCopy: CreateBlobWithEncodingOnHeapCopy::<Identity, OFFSET>,
            CreateBlobWithEncodingOnMalloc: 0,
            CreateIncludeHandler: CreateIncludeHandler::<Identity, OFFSET>,
            CreateStreamFromBlobReadOnly: 0,
            GetBlobAsUtf8: GetBlobAsUtf8::<Identity, OFFSET>,
            GetBlobAsWide: GetBlobAsWide::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDxcLibrary as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IDxcLibrary {}
windows_core::imp::define_interface!(
    IDxcOperationResult,
    IDxcOperationResult_Vtbl,
    0xcedb484a_d4e9_445a_b991_ca21ca157dc2
);
windows_core::imp::interface_hierarchy!(IDxcOperationResult, windows_core::IUnknown);
impl IDxcOperationResult {
    pub unsafe fn GetStatus(&self) -> windows_core::Result<windows_core::HRESULT> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).GetStatus)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub unsafe fn GetResult(&self) -> windows_core::Result<IDxcBlob> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).GetResult)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn GetErrorBuffer(&self) -> windows_core::Result<IDxcBlobEncoding> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).GetErrorBuffer)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
#[repr(C)]
pub struct IDxcOperationResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub GetStatus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub GetResult: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetErrorBuffer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
pub trait IDxcOperationResult_Impl: windows_core::IUnknownImpl {
    fn GetStatus(&self) -> windows_core::Result<windows_core::HRESULT>;
    fn GetResult(&self) -> windows_core::Result<IDxcBlob>;
    fn GetErrorBuffer(&self) -> windows_core::Result<IDxcBlobEncoding>;
}
impl IDxcOperationResult_Vtbl {
    pub const fn new<Identity: IDxcOperationResult_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetStatus<
            Identity: IDxcOperationResult_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pstatus: *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcOperationResult_Impl::GetStatus(this) {
                    Ok(ok__) => {
                        pstatus.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetResult<
            Identity: IDxcOperationResult_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            ppresult: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcOperationResult_Impl::GetResult(this) {
                    Ok(ok__) => {
                        ppresult.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetErrorBuffer<
            Identity: IDxcOperationResult_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pperrors: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcOperationResult_Impl::GetErrorBuffer(this) {
                    Ok(ok__) => {
                        pperrors.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            GetStatus: GetStatus::<Identity, OFFSET>,
            GetResult: GetResult::<Identity, OFFSET>,
            GetErrorBuffer: GetErrorBuffer::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDxcOperationResult as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IDxcOperationResult {}
windows_core::imp::define_interface!(
    IDxcResult,
    IDxcResult_Vtbl,
    0x58346cda_dde7_4497_9461_6f87af5e0659
);
impl core::ops::Deref for IDxcResult {
    type Target = IDxcOperationResult;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IDxcResult, windows_core::IUnknown, IDxcOperationResult);
impl IDxcResult {
    pub unsafe fn HasOutput(&self, dxcoutkind: DXC_OUT_KIND) -> windows_core::BOOL {
        unsafe {
            (windows_core::Interface::vtable(self).HasOutput)(
                windows_core::Interface::as_raw(self),
                dxcoutkind,
            )
        }
    }
    pub unsafe fn GetOutput<T>(
        &self,
        dxcoutkind: DXC_OUT_KIND,
        ppoutputname: *mut Option<IDxcBlobUtf16>,
        result__: *mut Option<T>,
    ) -> windows_core::Result<()>
    where
        T: windows_core::Interface,
    {
        unsafe {
            (windows_core::Interface::vtable(self).GetOutput)(
                windows_core::Interface::as_raw(self),
                dxcoutkind,
                &T::IID,
                result__ as *mut _ as *mut _,
                core::mem::transmute(ppoutputname),
            )
            .ok()
        }
    }
    pub unsafe fn GetNumOutputs(&self) -> u32 {
        unsafe {
            (windows_core::Interface::vtable(self).GetNumOutputs)(windows_core::Interface::as_raw(
                self,
            ))
        }
    }
    pub unsafe fn GetOutputByIndex(&self, index: u32) -> DXC_OUT_KIND {
        unsafe {
            (windows_core::Interface::vtable(self).GetOutputByIndex)(
                windows_core::Interface::as_raw(self),
                index,
            )
        }
    }
    pub unsafe fn PrimaryOutput(&self) -> DXC_OUT_KIND {
        unsafe {
            (windows_core::Interface::vtable(self).PrimaryOutput)(windows_core::Interface::as_raw(
                self,
            ))
        }
    }
}
#[repr(C)]
pub struct IDxcResult_Vtbl {
    pub base__: IDxcOperationResult_Vtbl,
    pub HasOutput:
        unsafe extern "system" fn(*mut core::ffi::c_void, DXC_OUT_KIND) -> windows_core::BOOL,
    pub GetOutput: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        DXC_OUT_KIND,
        *const windows_core::GUID,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetNumOutputs: unsafe extern "system" fn(*mut core::ffi::c_void) -> u32,
    pub GetOutputByIndex: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> DXC_OUT_KIND,
    pub PrimaryOutput: unsafe extern "system" fn(*mut core::ffi::c_void) -> DXC_OUT_KIND,
}
pub trait IDxcResult_Impl: IDxcOperationResult_Impl {
    fn HasOutput(&self, dxcoutkind: DXC_OUT_KIND) -> windows_core::BOOL;
    fn GetOutput(
        &self,
        dxcoutkind: DXC_OUT_KIND,
        iid: *const windows_core::GUID,
        ppvobject: *mut *mut core::ffi::c_void,
        ppoutputname: windows_core::OutRef<'_, IDxcBlobUtf16>,
    ) -> windows_core::Result<()>;
    fn GetNumOutputs(&self) -> u32;
    fn GetOutputByIndex(&self, index: u32) -> DXC_OUT_KIND;
    fn PrimaryOutput(&self) -> DXC_OUT_KIND;
}
impl IDxcResult_Vtbl {
    pub const fn new<Identity: IDxcResult_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn HasOutput<Identity: IDxcResult_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            dxcoutkind: DXC_OUT_KIND,
        ) -> windows_core::BOOL {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcResult_Impl::HasOutput(this, core::mem::transmute_copy(&dxcoutkind))
            }
        }
        unsafe extern "system" fn GetOutput<Identity: IDxcResult_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            dxcoutkind: DXC_OUT_KIND,
            iid: *const windows_core::GUID,
            ppvobject: *mut *mut core::ffi::c_void,
            ppoutputname: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcResult_Impl::GetOutput(
                    this,
                    core::mem::transmute_copy(&dxcoutkind),
                    core::mem::transmute_copy(&iid),
                    core::mem::transmute_copy(&ppvobject),
                    core::mem::transmute_copy(&ppoutputname),
                )
                .into()
            }
        }
        unsafe extern "system" fn GetNumOutputs<Identity: IDxcResult_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> u32 {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcResult_Impl::GetNumOutputs(this)
            }
        }
        unsafe extern "system" fn GetOutputByIndex<
            Identity: IDxcResult_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            index: u32,
        ) -> DXC_OUT_KIND {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcResult_Impl::GetOutputByIndex(this, core::mem::transmute_copy(&index))
            }
        }
        unsafe extern "system" fn PrimaryOutput<Identity: IDxcResult_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> DXC_OUT_KIND {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcResult_Impl::PrimaryOutput(this)
            }
        }
        Self {
            base__: IDxcOperationResult_Vtbl::new::<Identity, OFFSET>(),
            HasOutput: HasOutput::<Identity, OFFSET>,
            GetOutput: GetOutput::<Identity, OFFSET>,
            GetNumOutputs: GetNumOutputs::<Identity, OFFSET>,
            GetOutputByIndex: GetOutputByIndex::<Identity, OFFSET>,
            PrimaryOutput: PrimaryOutput::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDxcResult as windows_core::Interface>::IID
            || iid == &<IDxcOperationResult as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IDxcResult {}
windows_core::imp::define_interface!(
    IDxcUtils,
    IDxcUtils_Vtbl,
    0x4605c4cb_2019_492a_ada4_65f20bb7d67f
);
windows_core::imp::interface_hierarchy!(IDxcUtils, windows_core::IUnknown);
impl IDxcUtils {
    pub unsafe fn CreateBlobFromBlob<P0>(
        &self,
        pblob: P0,
        offset: u32,
        length: u32,
    ) -> windows_core::Result<IDxcBlob>
    where
        P0: windows_core::Param<IDxcBlob>,
    {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).CreateBlobFromBlob)(
                windows_core::Interface::as_raw(self),
                pblob.param().abi(),
                offset,
                length,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn CreateBlobFromPinned(
        &self,
        pdata: *const core::ffi::c_void,
        size: u32,
        codepage: DXC_CP,
    ) -> windows_core::Result<IDxcBlobEncoding> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).CreateBlobFromPinned)(
                windows_core::Interface::as_raw(self),
                pdata,
                size,
                codepage,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn CreateBlob(
        &self,
        pdata: *const core::ffi::c_void,
        size: u32,
        codepage: DXC_CP,
    ) -> windows_core::Result<IDxcBlobEncoding> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).CreateBlob)(
                windows_core::Interface::as_raw(self),
                pdata,
                size,
                codepage,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn LoadFile<P0>(
        &self,
        pfilename: P0,
        pcodepage: Option<*const DXC_CP>,
    ) -> windows_core::Result<IDxcBlobEncoding>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).LoadFile)(
                windows_core::Interface::as_raw(self),
                pfilename.param().abi(),
                pcodepage.unwrap_or(core::mem::zeroed()) as _,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn CreateDefaultIncludeHandler(&self) -> windows_core::Result<IDxcIncludeHandler> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).CreateDefaultIncludeHandler)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn GetBlobAsWide<P0>(&self, pblob: P0) -> windows_core::Result<IDxcBlobUtf16>
    where
        P0: windows_core::Param<IDxcBlob>,
    {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).GetBlobAsWide)(
                windows_core::Interface::as_raw(self),
                pblob.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn GetDxilContainerPart(
        &self,
        pshader: *const DxcBuffer,
        dxcpart: DXC_PART,
        pppartdata: *mut *mut core::ffi::c_void,
        ppartsizeinbytes: *mut u32,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).GetDxilContainerPart)(
                windows_core::Interface::as_raw(self),
                pshader,
                dxcpart,
                pppartdata as _,
                ppartsizeinbytes as _,
            )
            .ok()
        }
    }
    pub unsafe fn CreateReflection<T>(&self, pdata: *const DxcBuffer) -> windows_core::Result<T>
    where
        T: windows_core::Interface,
    {
        let mut result__ = core::ptr::null_mut();
        unsafe {
            (windows_core::Interface::vtable(self).CreateReflection)(
                windows_core::Interface::as_raw(self),
                pdata,
                &T::IID,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn GetPDBContents<P0>(
        &self,
        ppdbblob: P0,
        pphash: *mut Option<IDxcBlob>,
        ppcontainer: *mut Option<IDxcBlob>,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IDxcBlob>,
    {
        unsafe {
            (windows_core::Interface::vtable(self).GetPDBContents)(
                windows_core::Interface::as_raw(self),
                ppdbblob.param().abi(),
                core::mem::transmute(pphash),
                core::mem::transmute(ppcontainer),
            )
            .ok()
        }
    }
}
#[repr(C)]
pub struct IDxcUtils_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub CreateBlobFromBlob: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        u32,
        u32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateBlobFromPinned: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const core::ffi::c_void,
        u32,
        DXC_CP,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    MoveToBlob: usize,
    pub CreateBlob: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const core::ffi::c_void,
        u32,
        DXC_CP,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LoadFile: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *const DXC_CP,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    CreateReadOnlyStreamFromBlob: usize,
    pub CreateDefaultIncludeHandler: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    GetBlobAsUtf8: usize,
    pub GetBlobAsWide: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetDxilContainerPart: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const DxcBuffer,
        DXC_PART,
        *mut *mut core::ffi::c_void,
        *mut u32,
    ) -> windows_core::HRESULT,
    pub CreateReflection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const DxcBuffer,
        *const windows_core::GUID,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    BuildArguments: usize,
    pub GetPDBContents: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
pub trait IDxcUtils_Impl: windows_core::IUnknownImpl {
    fn CreateBlobFromBlob(
        &self,
        pblob: windows_core::Ref<'_, IDxcBlob>,
        offset: u32,
        length: u32,
    ) -> windows_core::Result<IDxcBlob>;
    fn CreateBlobFromPinned(
        &self,
        pdata: *const core::ffi::c_void,
        size: u32,
        codepage: DXC_CP,
    ) -> windows_core::Result<IDxcBlobEncoding>;
    fn CreateBlob(
        &self,
        pdata: *const core::ffi::c_void,
        size: u32,
        codepage: DXC_CP,
    ) -> windows_core::Result<IDxcBlobEncoding>;
    fn LoadFile(
        &self,
        pfilename: &windows_core::PCWSTR,
        pcodepage: *const DXC_CP,
    ) -> windows_core::Result<IDxcBlobEncoding>;
    fn CreateDefaultIncludeHandler(&self) -> windows_core::Result<IDxcIncludeHandler>;
    fn GetBlobAsWide(
        &self,
        pblob: windows_core::Ref<'_, IDxcBlob>,
    ) -> windows_core::Result<IDxcBlobUtf16>;
    fn GetDxilContainerPart(
        &self,
        pshader: *const DxcBuffer,
        dxcpart: DXC_PART,
        pppartdata: *mut *mut core::ffi::c_void,
        ppartsizeinbytes: *mut u32,
    ) -> windows_core::Result<()>;
    fn CreateReflection(
        &self,
        pdata: *const DxcBuffer,
        iid: *const windows_core::GUID,
        ppvreflection: *mut *mut core::ffi::c_void,
    ) -> windows_core::Result<()>;
    fn GetPDBContents(
        &self,
        ppdbblob: windows_core::Ref<'_, IDxcBlob>,
        pphash: windows_core::OutRef<'_, IDxcBlob>,
        ppcontainer: windows_core::OutRef<'_, IDxcBlob>,
    ) -> windows_core::Result<()>;
}
impl IDxcUtils_Vtbl {
    pub const fn new<Identity: IDxcUtils_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateBlobFromBlob<
            Identity: IDxcUtils_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pblob: *mut core::ffi::c_void,
            offset: u32,
            length: u32,
            ppresult: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcUtils_Impl::CreateBlobFromBlob(
                    this,
                    core::mem::transmute_copy(&pblob),
                    core::mem::transmute_copy(&offset),
                    core::mem::transmute_copy(&length),
                ) {
                    Ok(ok__) => {
                        ppresult.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateBlobFromPinned<
            Identity: IDxcUtils_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pdata: *const core::ffi::c_void,
            size: u32,
            codepage: DXC_CP,
            ppblobencoding: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcUtils_Impl::CreateBlobFromPinned(
                    this,
                    core::mem::transmute_copy(&pdata),
                    core::mem::transmute_copy(&size),
                    core::mem::transmute_copy(&codepage),
                ) {
                    Ok(ok__) => {
                        ppblobencoding.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateBlob<Identity: IDxcUtils_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            pdata: *const core::ffi::c_void,
            size: u32,
            codepage: DXC_CP,
            ppblobencoding: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcUtils_Impl::CreateBlob(
                    this,
                    core::mem::transmute_copy(&pdata),
                    core::mem::transmute_copy(&size),
                    core::mem::transmute_copy(&codepage),
                ) {
                    Ok(ok__) => {
                        ppblobencoding.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LoadFile<Identity: IDxcUtils_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            pfilename: windows_core::PCWSTR,
            pcodepage: *const DXC_CP,
            ppblobencoding: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcUtils_Impl::LoadFile(
                    this,
                    core::mem::transmute(&pfilename),
                    core::mem::transmute_copy(&pcodepage),
                ) {
                    Ok(ok__) => {
                        ppblobencoding.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateDefaultIncludeHandler<
            Identity: IDxcUtils_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            ppresult: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcUtils_Impl::CreateDefaultIncludeHandler(this) {
                    Ok(ok__) => {
                        ppresult.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetBlobAsWide<Identity: IDxcUtils_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            pblob: *mut core::ffi::c_void,
            ppblobencoding: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDxcUtils_Impl::GetBlobAsWide(this, core::mem::transmute_copy(&pblob)) {
                    Ok(ok__) => {
                        ppblobencoding.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetDxilContainerPart<
            Identity: IDxcUtils_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pshader: *const DxcBuffer,
            dxcpart: DXC_PART,
            pppartdata: *mut *mut core::ffi::c_void,
            ppartsizeinbytes: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcUtils_Impl::GetDxilContainerPart(
                    this,
                    core::mem::transmute_copy(&pshader),
                    core::mem::transmute_copy(&dxcpart),
                    core::mem::transmute_copy(&pppartdata),
                    core::mem::transmute_copy(&ppartsizeinbytes),
                )
                .into()
            }
        }
        unsafe extern "system" fn CreateReflection<
            Identity: IDxcUtils_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pdata: *const DxcBuffer,
            iid: *const windows_core::GUID,
            ppvreflection: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcUtils_Impl::CreateReflection(
                    this,
                    core::mem::transmute_copy(&pdata),
                    core::mem::transmute_copy(&iid),
                    core::mem::transmute_copy(&ppvreflection),
                )
                .into()
            }
        }
        unsafe extern "system" fn GetPDBContents<Identity: IDxcUtils_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            ppdbblob: *mut core::ffi::c_void,
            pphash: *mut *mut core::ffi::c_void,
            ppcontainer: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDxcUtils_Impl::GetPDBContents(
                    this,
                    core::mem::transmute_copy(&ppdbblob),
                    core::mem::transmute_copy(&pphash),
                    core::mem::transmute_copy(&ppcontainer),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            CreateBlobFromBlob: CreateBlobFromBlob::<Identity, OFFSET>,
            CreateBlobFromPinned: CreateBlobFromPinned::<Identity, OFFSET>,
            MoveToBlob: 0,
            CreateBlob: CreateBlob::<Identity, OFFSET>,
            LoadFile: LoadFile::<Identity, OFFSET>,
            CreateReadOnlyStreamFromBlob: 0,
            CreateDefaultIncludeHandler: CreateDefaultIncludeHandler::<Identity, OFFSET>,
            GetBlobAsUtf8: 0,
            GetBlobAsWide: GetBlobAsWide::<Identity, OFFSET>,
            GetDxilContainerPart: GetDxilContainerPart::<Identity, OFFSET>,
            CreateReflection: CreateReflection::<Identity, OFFSET>,
            BuildArguments: 0,
            GetPDBContents: GetPDBContents::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDxcUtils as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IDxcUtils {}
pub const MEMORY_ALLOCATION_ALIGNMENT: u32 = 16u32;
